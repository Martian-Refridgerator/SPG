
from Load import *
pygame.init()
from Classes import *
pygame.mouse.set_cursor(*pygame.cursors.arrow)
player=player()
screen = pygame.display.set_mode((1200,800))
clock=pygame.time.Clock()

screenidentity=1
charselectvar=1
scoretext=main_font.render("Score: "+str(player.score),1,(0,0,0))
moneytext=main_font.render("Money: "+str(player.currency),1,(0,0,0))
Name = ''
Name_rect = pygame.Rect(215,570,230,35)
color = color_passive
building_active_attack=False
building_active_heal=False
building_active_money=False
deleting_active=False
level=1
active = False
game_beaten=False
game_beaten_general=False
game_beaten_perfect=False
movingright=0
movingleft=0
playerx=500
playery=400
playerwidth=191
playerheight=64
current_time=0
shotcooldownbase=0
#for now
testenemy1=strongship(357,100,current_time)
testenemy2=fastship(357,100,current_time)
testenemy3=buffship("Strength",357,100,current_time)
enemies=[testenemy1,testenemy2,testenemy3] #first is strongship second is fastship and third is buffship
bullets = []
for i in range(6):
    x=400
    a=freespace(x+120*i+10*i,700)
    player.buildings.append(a)
def windowdraw(number):
    number=number
    if number==1:
        screen.fill((0, 0, 0))
        screen.blit(main_screen_bg, [0, 0])
        for i in range(len(mainmenubuttons)):
            mainmenubuttons[i].draw(screen)
    if number==2:
        screen.fill((125,255,255))
        screen.blit(abilityheader, (500, 340))
        screen.blit(maintext,(180,100))
        finishbutton.draw(screen)
        charselectbutton.draw(screen)
        backbutton.draw(screen)
        for i in range(4):
            if charselectvar == i+1:
                if i+1 != 4 or game_beaten == True:
                    for j in range(12):
                        screen.blit(heroes[i][j],charscreencoords[j])
            if charselectvar == 4 and game_beaten == False:
                screen.blit(secretabilitytext, (600, 340))
                screen.blit(scaled_secret_man, (150, 220))
                screen.blit(scaled_secret_shield, (500, 253))
                screen.blit(scaled_secret_icon, (670, 214))
                screen.blit(secretloretext,(500,400))
            if charselectvar==5:
                screen.blit(secretabilitytext, (600, 340))
                screen.blit(scaled_secret_man, (150, 220))
                screen.blit(scaled_secret_shield, (500, 253))
                screen.blit(scaled_secret_icon, (670, 214))
                screen.blit(secretloretext, (500, 400))
                screen.blit(secretselectedtext, (400, 720))


    if number==3:
        screen.fill((0,0,0))
        screen.blit(achievementheader,(310,50))
        screen.blit(achievementsubheader,(210,120))
        if game_beaten == False:
            screen.blit(achievementtext1false, (520,300))
            if game_beaten_general == False:
                screen.blit(achievementtext2false, (520,400))
            if game_beaten_perfect == False:
                screen.blit(achievementtext3false, (520,500))
        if game_beaten == True:
            screen.blit(achievementtext1true,(300,220))
            screen.blit(achievementsubtext1,(470,270))
            if game_beaten_general == True:
                screen.blit(achievementtext2true,(25,370))
                screen.blit(achievementsubtext2, (280,420))
            if game_beaten_perfect == True:
                screen.blit(achievementtext3true,(130,520))
                screen.blit(achievementsubtext3, (275,570))
        backbutton.draw(screen)
    if number==4:
        screen.fill((250,250,250))
        screen.blit(characterpictures[player.character-1],(-20,550))
        screen.blit(abilitypictures[player.character-1],(200,660))
        screen.blit(etext,(310,670))
        screen.blit(scoretext,(20,230))
        screen.blit(moneytext,(230,230))
        screen.blit(nametext,(25,760))
        if player.character==1:
            player.shield = strongshield(playerx, playery)
            screen.blit(scaled_shield_shield, (playerx, playery))
        if player.character == 2:
            player.shield = healShield(playerx, playery)
            screen.blit(scaled_heal_shield, (playerx, playery))
        if player.character==3:
            player.shield = buisinessshield(playerx, playery)
            screen.blit(scaled_money_shield, (playerx, playery))
        if player.character==4:
            player.shield = attackshield(playerx, playery)
            screen.blit(scaled_mean_shield, (playerx, playery))
        for i in range(len(enemies)):
            if enemies[i].__class__ == fastship:
                screen.blit(scaled_fast_ship, (enemies[i].x, enemies[i].y))
            if enemies[i].__class__ == strongship:
                screen.blit(scaled_strong_ship, (enemies[i].x, enemies[i].y))
            if enemies[i].__class__ == buffship:
                if enemies[i].buff == "Firerate":
                    screen.blit(scaled_buff_ship_firerate, (enemies[i].x, enemies[i].y))
                if enemies[i].buff == "Projectile_speed":
                    screen.blit(scaled_buff_ship_speed, (enemies[i].x, enemies[i].y))
                if enemies[i].buff == "Strength":
                    screen.blit(scaled_buff_ship_strength, (enemies[i].x, enemies[i].y))
        for i in range(len(buildingbuttons)):
            buildingbuttons[i-1].draw(screen)
        for i in range(len(player.buildings)):
            screen.blit(player.buildings[i].picture,(player.buildings[i].x,player.buildings[i].y))
        for i in range(len(bullets)):
            if bullets[i].type == "player":
                screen.blit(scaled_player_bullet,(bullets[i].x,bullets[i].y))
        for i in range(len(bullets)):
            if bullets[i].type == "strongship":
                screen.blit(scaled_big_bullet, (bullets[i].x, bullets[i].y))
            if bullets[i].type == "fastship":
                screen.blit(scaled_small_bullet, (bullets[i].x, bullets[i].y))






running = True

while running:
    current_time = pygame.time.get_ticks()
    for event in pygame.event.get():
        pos = pygame.mouse.get_pos()
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN:
            if active == True:
                if event.key == pygame.K_BACKSPACE:
                    Name = Name[:-1]
                elif event.key== pygame.K_RETURN:
                    active=False
                elif len(Name) < 10:
                    Name += event.unicode
            if event.key==pygame.K_e and screenidentity== 4 and player.charge==100:
                player.shield.ability()
            if screenidentity == 4:
                if event.key == pygame.K_d:
                    movingright = 1
                if event.key == pygame.K_a:
                    movingleft = 1
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_d:
                movingright = 0
            if event.key == pygame.K_a:
                movingleft = 0

        if active == False:
            color = color_passive
        else:
            color = color_active
        Namebox = typing_font.render(Name,True,color)
        if event.type == pygame.MOUSEBUTTONDOWN:
            if Name_rect.collidepoint(event.pos):
                active = True
            else:
                active = False
            if startbutton.isOver(pos) and screenidentity == 1:
                screenidentity=2
            if continuebutton.isOver(pos) and screenidentity == 1:
                screenidentity=2
            if quitbutton.isOver(pos) and screenidentity == 1:
                running = False
            if achievementbutton.isOver(pos) and screenidentity == 1:
                screenidentity=3

            if charselectbutton.isOver(pos) and screenidentity == 2 :
                if charselectvar == 4:
                    charselectvar = 0
                if charselectvar==5:
                    charselectvar=0
                charselectvar += 1
            if backbutton.isOver(pos) and screenidentity == 2:
                screenidentity= 1
            if backbutton.isOver(pos) and screenidentity == 3:
                screenidentity= 1
            if finishbutton.isOver(pos) and screenidentity==2 and game_beaten==True:
                player.name=Name
                player.character=charselectvar
                screenidentity= 4
            if finishbutton.isOver(pos) and screenidentity == 2 and game_beaten==False:
                if charselectvar<4:
                    player.name = Name
                    nametext = small_header_font.render(player.name, 1, (0, 0, 0))
                    player.character = charselectvar
                    screenidentity = 4
                else:
                    charselectvar=5
            if cancelbutton.isOver(pos) and screenidentity==4:
                building_active_attack = False
                building_active_heal = False
                building_active_money = False
                deleting_active=False
                pygame.mouse.set_cursor(*pygame.cursors.arrow)
            if deletebutton.isOver(pos) and screenidentity==4:
                deleting_active=True
                pygame.mouse.set_cursor(*pygame.cursors.broken_x)
            if attackbutton.isOver(pos) and screenidentity==4:
                building_active_attack=True
                pygame.mouse.set_cursor(*pygame.cursors.diamond)
            if healbutton.isOver(pos) and screenidentity==4:
                building_active_heal=True
                pygame.mouse.set_cursor(*pygame.cursors.diamond)
            if genbutton.isOver(pos) and screenidentity==4:
                building_active_money=True
                pygame.mouse.set_cursor(*pygame.cursors.diamond)
            if building_active_attack==True and screenidentity==4:
                for i in range(len(player.buildings)):
                    if pos[0]>player.buildings[i].x and pos[0]<player.buildings[i].x+120 and pos[1]>player.buildings[i].y and pos[1]<player.buildings[i].y+20 and player.buildings[i].__class__==freespace:
                        x=player.buildings[i].x
                        y=player.buildings[i].y
                        player.buildings[i]=attackbuilding(x,y)
                        building_active_attack=False
                        pygame.mouse.set_cursor(*pygame.cursors.arrow)
            if building_active_heal == True and screenidentity == 4:
                for i in range(len(player.buildings)):
                    if pos[0] > player.buildings[i].x and pos[0] < player.buildings[i].x + 120 and pos[1] > player.buildings[i].y and pos[1] < player.buildings[i].y + 20 and player.buildings[i].__class__ == freespace:
                        x = player.buildings[i].x
                        y = player.buildings[i].y
                        player.buildings[i] = healbuilding(x, y)
                        building_active_heal = False
                        pygame.mouse.set_cursor(*pygame.cursors.arrow)
            if building_active_money == True and screenidentity == 4:
                for i in range(len(player.buildings)):
                    if pos[0] > player.buildings[i].x and pos[0] < player.buildings[i].x + 120 and pos[1] > player.buildings[i].y and pos[1] < player.buildings[i].y + 20 and player.buildings[i].__class__ == freespace:
                        x = player.buildings[i].x
                        y = player.buildings[i].y
                        player.buildings[i] = factory(x, y)
                        building_active_money = False
                        pygame.mouse.set_cursor(*pygame.cursors.arrow)
            if deleting_active==True and screenidentity==4:
                for i in range(len(player.buildings)):
                    if player.buildings[i].__class__ != freespace and pos[0]>player.buildings[i].x and pos[0]<player.buildings[i].x+player.buildings[i].width and pos[1]>player.buildings[i].y and pos[1]<player.buildings[i].y+player.buildings[i].height:
                        if player.buildings[i].__class__==attackbuilding:
                            x=player.buildings[i].x
                            y=player.buildings[i].y+player.buildings[i].height-10
                            player.buildings[i]=freespace(x,y)
                        if player.buildings[i].__class__ == healbuilding:
                            x = player.buildings[i].x
                            y = player.buildings[i].y + player.buildings[i].height - 20
                            player.buildings[i] = freespace(x, y)
                        if player.buildings[i].__class__==factory:
                            x=player.buildings[i].x
                            y=player.buildings[i].y+player.buildings[i].height
                            player.buildings[i] = freespace(x, y)
                        deleting_active=False
                        pygame.mouse.set_cursor(*pygame.cursors.arrow)
            if screenidentity == 4 and pos[0]>350:
                if current_time - shotcooldownbase > 400:
                    shotcooldownbase = current_time
                    for i in range(len(player.buildings)):
                        if player.buildings[i].__class__ == attackbuilding:
                                a = bullet(player.buildings[i].x,player.buildings[i].y,pos[0],pos[1],4,"player",20,20)
                                bullets.append(a)



        if event.type == pygame.MOUSEMOTION:
            for i in range(len(mainmenubuttons)):
                if mainmenubuttons[i].isOver(pos):
                    mainmenubuttons[i].color = (255,226,68)
                else:
                    mainmenubuttons[i].color = (125,255,255)

            if charselectbutton.isOver(pos):
                charselectbutton.color = (200,200,200)
            else:
                charselectbutton.color = (255,255,255)
            if backbutton.isOver(pos):
                backbutton.color = (200,200,200)
            else:
                backbutton.color = (255,255,255)
            if finishbutton.isOver(pos):
                finishbutton.color = (200,200,200)
            else:
                finishbutton.color = (255, 255, 255)
            if deletebutton.isOver(pos):
                deletebutton.color=(200,200,200)
            else:
                deletebutton.color = (255, 255, 255)
            if cancelbutton.isOver(pos):
                cancelbutton.color=(200,200,200)
            else:
                cancelbutton.color = (255, 255, 255)
            if attackbutton.isOver(pos):
                attackbutton.color=(200,200,200)
            else:
                attackbutton.color = (255, 255, 255)
            if healbutton.isOver(pos):
                healbutton.color=(200,200,200)
            else:
                healbutton.color = (255, 255, 255)
            if genbutton.isOver(pos):
                genbutton.color=(200,200,200)
            else:
                genbutton.color = (255, 255, 255)

    if movingright == 1 and (playerx + (playerwidth)) < 1200:
        playerx += 5
    if movingleft == 1 and playerx > 350:
        playerx -= 5

    if screenidentity == 4:
        for i in range(len(enemies)):
            if enemies[i].x + enemies[i].width < 1200 and enemies[i].direction == "r":
                enemies[i].x += enemies[i].speed
            if enemies[i].x + enemies[i].width >= 1200 and enemies[i].direction == "r":
                enemies[i].direction = "l"
            if enemies[i].x > 350 and enemies[i].direction == "l":
                enemies[i].x -= enemies[i].speed
            if enemies[i].x <= 350 and enemies[i].direction == "l":
                enemies[i].direction = "r"
            if enemies[i].__class__ == fastship:
                if current_time - enemies[i].timer > 2000 / enemies[i].attackspeed:
                    a = bullet(enemies[i].x, enemies[i].y, enemies[i].x, enemies[i].y + 1, 4, "fastship", 20, 20)
                    bullets.append(a)
                    enemies[i].timer=current_time
            if enemies[i].__class__ == strongship:
                if current_time - enemies[i].timer > 2000 / enemies[i].attackspeed:
                    a = bullet(enemies[i].x, enemies[i].y, enemies[i].x, enemies[i].y + 1, 4, "strongship", 40, 40)
                    bullets.append(a)
                    enemies[i].timer = current_time
        bulletstobedeleted = []
        if bullets != [] and player.shield != None:
            for i in range(len(bullets)):
                for k in range(len(enemies)):
                    if bullets[i].x >= enemies[k].x and bullets[i].x <= enemies[k].x + enemies[k].width and bullets[i].type == "player" or bullets[i].x + bullets[i].width >= enemies[k].x and bullets[i].x + bullets[i].width <= enemies[k].x + enemies[k].width and bullets[i].type == "player":
                        if bullets[i].y >= enemies[k].y and bullets[i].y <= enemies[k].y + enemies[k].height and bullets[i].type == "player" or bullets[i].y + bullets[i].height >= enemies[k].y and bullets[i].y + bullets[i].height <= enemies[k].y + enemies[k].height and bullets[i].type == "player":
                            bulletstobedeleted.append(i)
                for k in range(len(player.buildings)):
                    if player.buildings[k].__class__ != freespace:
                        if bullets[i].x >= player.buildings[k].x and bullets[i].x <= player.buildings[k].x + player.buildings[k].width and bullets[i].type == "fastship" or bullets[i].x + bullets[i].width >= player.buildings[k].x and bullets[i].x + bullets[i].width <= player.buildings[k].x + player.buildings[k].width and bullets[i].type == "fastship":
                            if bullets[i].y >= player.buildings[k].y and bullets[i].y <= player.buildings[k].y + player.buildings[k].height and bullets[i].type == "fastship" or bullets[i].y + bullets[i].height >= player.buildings[k].y and bullets[i].y + bullets[i].height <= player.buildings[k].y + player.buildings[k].height and bullets[i].type == "fastship":
                                  bulletstobedeleted.append(i)
                for k in range(len(player.buildings)):
                    if player.buildings[k].__class__ != freespace:
                        if bullets[i].x >= player.buildings[k].x and bullets[i].x <= player.buildings[k].x + player.buildings[k].width and bullets[i].type == "strongship" or bullets[i].x + bullets[i].width >= player.buildings[k].x and bullets[i].x + bullets[i].width <= player.buildings[k].x + player.buildings[k].width and bullets[i].type == "strongship":
                            if bullets[i].y >= player.buildings[k].y and bullets[i].y <= player.buildings[k].y + player.buildings[k].height and bullets[i].type == "strongship" or bullets[i].y + bullets[i].height >= player.buildings[k].y and bullets[i].y + bullets[i].height <= player.buildings[k].y + player.buildings[k].height and bullets[i].type == "strongship":
                                bulletstobedeleted.append(i)

                if bullets[i].x >= player.shield.x and bullets[i].x <= player.shield.x + player.shield.width and bullets[i].type == "fastship" or bullets[i].x + bullets[i].width >= player.shield.x and bullets[i].x + bullets[i].width <= player.shield.x + player.shield.width and bullets[i].type == "fastship":
                    if bullets[i].y >= player.shield.y and bullets[i].y <= player.shield.y + player.shield.height and bullets[i].type == "fastship" or bullets[i].y + bullets[i].height >= player.shield.y and bullets[i].y + bullets[i].height <= player.shield.y + player.shield.height and bullets[i].type == "fastship":
                        bulletstobedeleted.append(i)

                if bullets[i].x >= player.shield.x and bullets[i].x <= player.shield.x + player.shield.width and bullets[i].type == "strongship" or bullets[i].x + bullets[i].width >= player.shield.x and bullets[i].x + bullets[i].width <= player.shield.x + player.shield.width and bullets[i].type == "strongship":
                    if bullets[i].y >= player.shield.y and bullets[i].y <= player.shield.y + player.shield.height and bullets[i].type == "strongship" or bullets[i].y + bullets[i].height >= player.shield.y and bullets[i].y + bullets[i].height <= player.shield.y + player.shield.height and bullets[i].type == "strongship":
                        bulletstobedeleted.append(i)


                if bullets[i].x + bullets[i].dx + bullets[i].width > 1200 or bullets[i].x + bullets[i].dx < 350 or bullets[i].y + bullets[i].dy +bullets[i].height > 800 or bullets[i].y + bullets[i].dy < 0:
                    bulletstobedeleted.append(i)

                else:
                    bullets[i].x += bullets[i].dx
                    bullets[i].y += bullets[i].dy
            for i in range(len(bulletstobedeleted)):

                del bullets[bulletstobedeleted[i]]
    windowdraw(screenidentity)
    if screenidentity == 2:
        Name_rect.w = max(230,Namebox.get_width()+10)
        screen.blit(Namebox, (Name_rect.x+5,Name_rect.y))
        pygame.draw.rect(screen,color,Name_rect,2)
    pygame.display.update()
    clock.tick(60)
