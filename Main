
from Load import *
pygame.init()
from Classes import *
from pygame import mixer
import random
pygame.mouse.set_cursor(*pygame.cursors.arrow)
income=1
money_production=0
timer=1
healmod=0
healingrange=1
damage=0
bulletspeed=4
damagetakenmod=0
enemyspawntimer=0
chargemod=1
playermods=[income,money_production,damage,bulletspeed,damagetakenmod]
player=player(income,money_production,damage,bulletspeed,damagetakenmod)
playerstuff=[player.income,player.money_production,player.damage,player.bulletspeed,player.damagetakenmod]
screen = pygame.display.set_mode((1200,800))
clock=pygame.time.Clock()
ability_sound=mixer.Sound("sfx_sound_shutdown2.wav")
menu_sound=mixer.Sound("sfx_menu_select2.wav")
destroy_sound=mixer.Sound("sfx_exp_medium7.wav")
hit_sound=mixer.Sound("sfx_sounds_impact1.wav")
explode_sound=mixer.Sound("sfx_sounds_impact11.wav")
enemy_weapon_sound=mixer.Sound("sfx_wpn_laser9.wav")
ally_weapon_sound=mixer.Sound("sfx_wpn_laser6.wav")
shield_weapon_sound=mixer.Sound("sfx_wpn_laser5.wav")
mixer.music.load("BeepBox-Song.wav")
amounts=[5,10,15]
costs=[100,150,200]
taken=["Untaken","Untaken","Untaken","Untaken"]

sceneline=-1


shopbuttons=[None,None,None,None]
buttontypes=[None,None,None,None]
shoppictures=[None,None,None,None]

mixer.music.play(-1)
screenidentity=1
charselectvar=1
Name = ''
Name_rect = pygame.Rect(215,570,230,35)
color = color_passive
building_active_attack=False
building_active_heal=False
building_active_money=False
deleting_active=False
action_active=False
level=1
active = False
game_beaten=True
game_beaten_general=False
game_beaten_perfect=False
movingright=0
movingleft=0
playerx=500
playery=400
playerwidth=191
playerheight=64
current_time=0
shotcooldownbase=0
time=0
shieldabilityactive=0
businessabilityactive=0
healrangeupgrade=False
factorystorage=0
moneyscore=0
blockscore=0
cutscenenumber=0

def enemyspawn():
    buffpresent=0
    for i in range(3):
        for k in range(len(enemies)):
            if enemies[k].__class__ == buffship:
                buffpresent=1
        if buffpresent == 0 and len(enemies) > 2:
            r=random.randrange(1,4)
            if r == 1:
                b = "Strength"
            if r == 2:
                b = "Firerate"
            if r == 3:
                b = "Projectile_speed"
            a = buffship(b,357+i*80,100,current_time)
            enemies.append(a)
        if buffpresent == 0 and len(enemies) < 3:
            r = random.randrange(1,3)
            if r == 1:
                a = strongship(357+i*80,100,current_time)
                enemies.append(a)
            if r == 2:
                a = fastship(357+i*80,100,current_time)
                enemies.append(a)
        if buffpresent == 1:
            r = random.randrange(1, 3)
            if r == 1:
                a = strongship(357+i*80, 100, current_time)
                enemies.append(a)
            if r == 2:
                a = fastship(357+i*80, 100, current_time)
                enemies.append(a)

def healability():
    for i in range(len(player.buildings)):
        if player.buildings[i].__class__ != freespace:
            if player.buildings[i].health<player.buildings[i].maxhealth-30:
                player.buildings[i].health+=30
            else:
                player.buildings[i].health+= player.buildings[i].maxhealth-player.buildings[i].health
    player.charge=0


junkyard=bossship("Healing",600,0,"idfk",300,120)
teleport=bossship("Teleportation",600,0,"stilldfk",300,120)
Megumin=bossship("EXPLOSION",600,0,"stop asking",300,120)
final=bossship("Shield",600,200,"leave me alone",191,64)
enemies=[]
bullets = []
boss = [Megumin]
for i in range(6):
    x=400
    a=freespace(x+120*i+10*i,700)
    player.buildings.append(a)
def windowdraw(number):
    number=number
    if number==1:
        screen.fill((0, 0, 0))
        screen.blit(main_screen_bg, [0, 0])
        for i in range(len(mainmenubuttons)):
            mainmenubuttons[i].draw(screen)
    if number==2:
        screen.fill((125,255,255))
        screen.blit(abilityheader, (500, 340))
        screen.blit(maintext,(180,100))
        finishbutton.draw(screen)
        charselectbutton.draw(screen)
        backbutton.draw(screen)
        for i in range(4):
            if charselectvar == i+1:
                if i+1 != 4 or game_beaten == True:
                    for j in range(12):
                        screen.blit(heroes[i][j],charscreencoords[j])
            if charselectvar == 4 and game_beaten == False:
                screen.blit(secretabilitytext, (600, 340))
                screen.blit(scaled_secret_man, (150, 220))
                screen.blit(scaled_secret_shield, (500, 253))
                screen.blit(scaled_secret_icon, (670, 214))
                screen.blit(secretloretext,(500,400))
            if charselectvar==5:
                screen.blit(secretabilitytext, (600, 340))
                screen.blit(scaled_secret_man, (150, 220))
                screen.blit(scaled_secret_shield, (500, 253))
                screen.blit(scaled_secret_icon, (670, 214))
                screen.blit(secretloretext, (500, 400))
                screen.blit(secretselectedtext, (400, 720))


    if number==3:
        screen.fill((0,0,0))
        screen.blit(achievementheader,(310,50))
        screen.blit(achievementsubheader,(210,120))
        if game_beaten == False:
            screen.blit(achievementtext1false, (520,300))
            if game_beaten_general == False:
                screen.blit(achievementtext2false, (520,400))
            if game_beaten_perfect == False:
                screen.blit(achievementtext3false, (520,500))
        if game_beaten == True:
            screen.blit(achievementtext1true,(300,220))
            screen.blit(achievementsubtext1,(470,270))
            if game_beaten_general == True:
                screen.blit(achievementtext2true,(25,370))
                screen.blit(achievementsubtext2, (280,420))
            else:
                screen.blit(achievementtext2false, (520, 400))
            if game_beaten_perfect == True:
                screen.blit(achievementtext3true,(130,520))
                screen.blit(achievementsubtext3, (275,570))
            else:
                screen.blit(achievementtext3false, (520, 500))
        backbutton.draw(screen)
    if number==4:
        scoretext=main_font.render("Score: "+str(player.score),1,(250,250,250))
        moneytext=main_font.render("Money: "+str(player.currency),1,(250,250,250))
        screen.fill((250,250,250))
        pygame.draw.rect(screen,(0,0,0),(0,0,350,800),0)
        screen.blit(characterpictures[player.character-1],(-20,550))
        screen.blit(abilitypictures[player.character-1],(200,660))
        screen.blit(etext,(310,670))
        screen.blit(scoretext,(20,230))
        screen.blit(moneytext,(230,230))
        screen.blit(nametext,(25,760))
        if player.character==1:
            player.shield = strongshield(playerx, playery,chargemod)
            screen.blit(scaled_shield_shield, (playerx, playery))
        if shieldabilityactive ==1:
            screen.blit(shield_shield_shield,(350,playery))
        if player.character == 2:
            player.shield = healShield(playerx, playery,chargemod)
            screen.blit(scaled_heal_shield, (playerx, playery))
        if player.character==3:
            player.shield = businessshield(playerx, playery,chargemod)
            screen.blit(scaled_money_shield, (playerx, playery))
        if player.character==4:
            player.shield = attackshield(playerx, playery,chargemod)
            screen.blit(scaled_mean_shield, (playerx, playery))
        pygame.draw.rect(screen, (255, 255, 255), (266 - 2, 570 - 2, 30 + 4, 100 + 4), 0)
        pygame.draw.rect(screen, player.shield.colour, (266, 570, 30, player.charge), 0)
        for i in range(len(enemies)):
            if enemies[i].__class__ == fastship:
                screen.blit(scaled_fast_ship, (enemies[i].x, enemies[i].y))
            if enemies[i].__class__ == strongship:
                screen.blit(scaled_strong_ship, (enemies[i].x, enemies[i].y))
            if enemies[i].__class__ == buffship:
                if enemies[i].buff == "Firerate":
                    screen.blit(scaled_buff_ship_firerate, (enemies[i].x, enemies[i].y))
                if enemies[i].buff == "Projectile_speed":
                    screen.blit(scaled_buff_ship_speed, (enemies[i].x, enemies[i].y))
                if enemies[i].buff == "Strength":
                    screen.blit(scaled_buff_ship_strength, (enemies[i].x, enemies[i].y))
            pygame.draw.rect(screen, (0, 0, 0), (enemies[i].x+13 - 2, enemies[i].y+enemies[i].height+5 - 2, 54, 14), 0)
            pygame.draw.rect(screen, (252, 3, 19), (enemies[i].x+13, enemies[i].y+enemies[i].height+5,enemies[i].maxhealth / 100 * enemies[i].health *0.225, 10), 0)
        for i in range(len(buildingbuttons)):
            buildingbuttons[i-1].draw(screen)
        for i in range(len(player.buildings)):
            screen.blit(player.buildings[i].picture,(player.buildings[i].x,player.buildings[i].y))
            if player.buildings[i].__class__!=freespace:
                pygame.draw.rect(screen,(0,0,0), (player.buildings[i].x-2, 720-2, 104, 14), 0)
                pygame.draw.rect(screen, (252, 3, 19), (player.buildings[i].x, 720, player.buildings[i].maxhealth/100*player.buildings[i].health*player.buildings[i].hpbarmod, 10), 0)
        for i in range(len(bullets)):
            if bullets[i].type == "player":
                screen.blit(scaled_player_bullet,(bullets[i].x,bullets[i].y))
            if bullets[i].type == "strongship":
                screen.blit(scaled_big_bullet, (bullets[i].x, bullets[i].y))
            if bullets[i].type == "fastship":
                screen.blit(scaled_small_bullet, (bullets[i].x, bullets[i].y))
            if bullets[i].type == "meanplayer":
                screen.blit(scaled_mean_player_bullet,(bullets[i].x,bullets[i].y))
            if bullets[i].type == "BOOM":
                screen.blit(scaled_explosion_boss_bullet, (bullets[i].x, bullets[i].y))
        for i in range(len(boss)):
            if boss[i].ability == "Healing":
                screen.blit(scaled_mechanic_boss, (boss[i].x, boss[i].y))
            if boss[i].ability == "Teleportation":
                screen.blit(scaled_teleport_boss, (boss[i].x, boss[i].y))
            if boss[i].ability == "EXPLOSION":
                screen.blit(scaled_explosion_boss, (boss[i].x, boss[i].y))
            if boss[i].ability == "Shield":
                screen.blit((scaled_mean_shield), (boss[i].x, boss[i].y))
            pygame.draw.rect(screen, (0, 0, 0), (boss[i].x + 13 - 2, boss[i].y + boss[i].height + 5 - 2, 54, 14), 0)
            pygame.draw.rect(screen, (252, 3, 19), (
            boss[i].x + 13, boss[i].y + boss[i].height + 5, boss[i].maxhealth / 100 * boss[i].health * 0.225, 10), 0)

    if number==5:
        moneytext = small_header_font.render("Money: " + str(player.currency), 1, (0, 0, 0))
        screen.fill((224, 45, 90))
        shopcontinuebutton.draw(screen)
        screen.blit(shopheader,(500,80))
        screen.blit(moneytext,(900,200))
        if shopbuttons[0] == None or shopbuttons[1] == None or shopbuttons[2] == None or shopbuttons[3] == None:
            for i in range (2):
                a=random.randrange(1,4)
                b=random.choice(amounts)
                if a==1:
                    shoppictures[i]="money_buff"
                    text=" Production + "+str(b)+"%"
                    buttontypes[i]="money"+str(b)
                if a==2:
                    shoppictures[i] = "more_healing"
                    text = "Healing + " + str(b) + "%"
                    buttontypes[i] = "healing" + str(b)
                if a==3:
                    shoppictures[i] = "more_damage"
                    text = "Damage + " + str(b) + "%"
                    buttontypes[i] = "damage" + str(b)
                if a==4:
                    shoppictures[i] = "damage_taken"
                    text = "Damage Taken - " + str(b) + "%"
                    buttontypes[i] = "resist" + str(b)
                if b==5:
                    shopbuttons[i] = button((250,250,250),300,200+i*110,500,100,str(text)+"        Cost: 100")
                if b==10:
                    shopbuttons[i] = button((250, 250, 250), 300, 200 + i * 110, 500, 100,str(text)+"        Cost: 150")
                if b==15:
                    shopbuttons[i] = button((250, 250, 250), 300, 200 + i * 110, 500, 100,str(text)+"        Cost: 200")
            for i in range(2):
                d = random.randrange(1, 4)
                if d==1:
                    shoppictures[i+2] = "passive_money"
                    text= "Passive Income + 1        Cost: 200"
                    buttontypes[i+2]="passivemon"
                    shopbuttons[i+2] = button((250,250,250),300,200+(i+2)*110,500, 100,text)
                if d==2:
                    shoppictures[i + 2] = "healing_range"
                    text= "Healing Range + 1        Cost: 200"
                    buttontypes[i+2]="hrange"
                    shopbuttons[i+2] = button((250,250,250),300,200+(i+2)*110,500, 100,text)
                if d==3:
                    shoppictures[i + 2] = "projectile_speed"
                    text= "Shot Speed + 1        Cost: 200"
                    buttontypes[i+2]="shotspd"
                    shopbuttons[i+2] = button((250,250,250),300,200+(i+2)*110,500, 100,text)
                if d==4:
                    shoppictures[i + 2] = "charge_bonus"
                    text= "Charge Modifier + 1        Cost: 300"
                    buttontypes[i+2]="chargespd"
                    shopbuttons[i+2] = button((250,250,250),300,200+(i+2)*110,500, 100,text)
        for i in range(len(shopbuttons)):
            shopbuttons[i].draw(screen)
            if shoppictures[i]=="money_buff":
                screen.blit(scaled_money_buff, (220, 200 + i * 110))
            if shoppictures[i]=="more_healing":
                screen.blit(scaled_more_healing, (220, 200 + i * 110))
            if shoppictures[i]=="more_damage":
                screen.blit(scaled_more_damage, (220, 200 + i * 110))
            if shoppictures[i]=="damage_taken":
                screen.blit(scaled_damage_taken, (220, 200 + i * 110))
            if shoppictures[i]=="passive_money":
                screen.blit(scaled_passive_money, (220, 200 + i * 110))
            if shoppictures[i]=="healing_range":
                screen.blit(scaled_healing_range, (220, 200 + i * 110))
            if shoppictures[i]=="projectile_speed":
                screen.blit(scaled_projectile_speed, (220, 200 + i * 110))
            if shoppictures[i]=="charge_bonus":
                screen.blit(scaled_charge_bonus, (220, 200 + i * 110))
    if number==6:
        screen.fill((0,0,0))
        screen.blit(scaled_humantown,(0,0))
        screen.blit(scaled_lizardtown,(0,400))
        if cutscenenumber==0:
            pygame.draw.rect(screen, (250, 250, 250), (200, 175, 800, 450), 0)
            if sceneline==0:
                for i in range(3):
                    screen.blit(c1t1[i],(600-c1t1[i].get_width()/2,350+i*c1t1[i].get_height()+i*10))
            if sceneline==1:
                screen.blit(c1t2,(600-c1t2.get_width()/2,380))

            if sceneline==2:
                for i in range(3):
                    screen.blit(c1t3[i],(600-c1t3[i].get_width()/2,350+i*c1t3[i].get_height()+i*10))
            if sceneline==3:
                for i in range(4):
                    screen.blit(c1t4[i],(600-c1t4[i].get_width()/2,350+i*c1t4[i].get_height()+i*10))
        if cutscenenumber==1:
            if c2t[sceneline].side=="ally":
                y=500
            else:
                y=100
            if c2t[sceneline].picture==None:
                c2t[sceneline].picture=characterpictures[player.character - 1]
            if c2t[sceneline].name=="" and player.name!="":
                c2t[sceneline].name=player.name
            c2t[sceneline].draw(screen,y)
        if cutscenenumber==2:
            if sceneline==0:
                pygame.draw.rect(screen, (250, 250, 250), (200, 175, 800, 450), 0)
                screen.blit(c3t0,(600-c3t0.get_width()/2,350+c3t0.get_height()+10))
            else:
                if c3t[sceneline-1].side == "ally":
                    y = 500
                else:
                    y = 100
                c3t[sceneline-1].draw(screen,y)
        if cutscenenumber==3:
            if c4t[sceneline].side == "ally":
                y = 500
            else:
                y = 100
            c4t[sceneline].draw(screen,y)
        if cutscenenumber==4:
            if c5t[sceneline].side == "ally":
                y = 500
            else:
                y = 100
            c5t[sceneline].draw(screen,y)
        if cutscenenumber==5:
            if c6t[sceneline].side == "ally":
                y = 500
            else:
                y = 100
            c6t[sceneline].draw(screen,y)
        if cutscenenumber==6:
            if c7t[sceneline].side == "ally":
                y = 500
            else:
                y = 100
            c7t[sceneline].draw(screen,y)
        if cutscenenumber==7:
            if c8t[sceneline].side == "ally":
                y = 500
            else:
                y = 100
            c8t[sceneline].draw(screen,y)
        if cutscenenumber==8:
            if c9t[sceneline].side == "ally":
                y = 500
            else:
                y = 100
            c9t[sceneline].draw(screen,y)
        if cutscenenumber==9:
            if c10t[sceneline].side == "ally":
                y = 500
            else:
                y = 100
            c10t[sceneline].draw(screen,y)
        if cutscenenumber==10:
            if c11t[sceneline].side == "ally":
                y = 500
            else:
                y = 100
            c11t[sceneline].draw(screen,y)
        if cutscenenumber==11:
            if c12t[sceneline].side == "ally":
                y = 500
            else:
                y = 100
            c12t[sceneline].draw(screen,y)
        if cutscenenumber==12:
            pygame.draw.rect(screen, (250, 250, 250), (200, 175, 800, 450), 0)
            for i in range(3):
                screen.blit(c13t[i], (600 - c13t[i].get_width() / 2, 350 + i * c13t[i].get_height() + i * 10))





























running = True
enemyspawn()
while running:
    current_time = pygame.time.get_ticks()
    for i in range(len(player.buildings)):
        if player.buildings[i].__class__ == healbuilding:
            if businessabilityactive == 1:
                if player.buildings[i].health + (player.buildings[i].healing+player.buildings[i].healing/100*player.buildings[i].healm) * player.shield.abilitymult <= player.buildings[i].maxhealth:
                    player.buildings[i].health += (player.buildings[i].healing+player.buildings[i].healing/100*player.buildings[i].healm) * player.shield.abilitymult
                for k in range(player.buildings[i].range):
                    if i + k + 1 < 6:
                        if player.buildings[i + k + 1].__class__ != freespace:
                            if player.buildings[i + k + 1].health + (player.buildings[i].healing+player.buildings[i].healing/100*player.buildings[i].healm) * player.shield.abilitymult <= player.buildings[i + k + 1].maxhealth:
                                player.buildings[i + k + 1].health += (player.buildings[i].healing+player.buildings[i].healing/100*player.buildings[i].healm) * player.shield.abilitymult
                    if i - k - 1 >= 0:
                        if player.buildings[i - k - 1].__class__ != freespace:
                            if player.buildings[i - k - 1].health + (player.buildings[i].healing+player.buildings[i].healing/100*player.buildings[i].healm) * player.shield.abilitymult <= player.buildings[i - k - 1].maxhealth:
                                player.buildings[i - k - 1].health += (player.buildings[i].healing+player.buildings[i].healing/100*player.buildings[i].healm) * player.shield.abilitymult
            else:
                if player.buildings[i].health + (player.buildings[i].healing+player.buildings[i].healing/100*player.buildings[i].healm) <= player.buildings[i].maxhealth:
                    player.buildings[i].health += player.buildings[i].healing+player.buildings[i].healing/100*player.buildings[i].healm
                for k in range(player.buildings[i].range):
                    if i + k + 1 < 6:
                        if player.buildings[i + k + 1].__class__ != freespace:
                            if player.buildings[i + k + 1].health + (player.buildings[i].healing+player.buildings[i].healing/100*player.buildings[i].healm) <= player.buildings[i + k + 1].maxhealth:
                                player.buildings[i + k + 1].health += player.buildings[i].healing+player.buildings[i].healing/100*player.buildings[i].healm
                    if i - k - 1 >= 0:
                        if player.buildings[i - k - 1].__class__ != freespace:
                            if player.buildings[i - k - 1].health + (player.buildings[i].healing+player.buildings[i].healing/100*player.buildings[i].healm) <= player.buildings[i - k - 1].maxhealth:
                                player.buildings[i - k - 1].health += player.buildings[i].healing+player.buildings[i].healing/100*player.buildings[i].healm
        if player.buildings[i].__class__ == factory:
            if factorystorage < 40+40/100*player.money_production:
                if businessabilityactive ==1:
                    factorystorage += 0.1 * player.shield.abilitymult
                else:
                    factorystorage+=0.1
            if factorystorage >= 40+40/100*player.money_production:
                player.currency+=40+40/100*player.money_production
                factorystorage=0
                moneyscore+=1


    for event in pygame.event.get():
        pos = pygame.mouse.get_pos()
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN:
            if active == True:
                if event.key == pygame.K_BACKSPACE:
                    Name = Name[:-1]
                elif event.key== pygame.K_RETURN:
                    active=False
                elif len(Name) < 10:
                    Name += event.unicode
            if event.key==pygame.K_e and screenidentity== 4 and player.charge>=100:
                ability_sound.play()
                if player.shield.__class__==healShield:
                    healability()
                if player.shield.__class__==strongshield:
                    shieldabilityactive=1
                    shieldtimer = current_time
                    player.charge = 0
                if player.shield.__class__==businessshield:
                    businessabilityactive=1
                    shieldtimer = current_time
                    player.charge = 0
            if event.key == pygame.K_e and screenidentity == 4 and player.charge >= 20:
                if player.shield.__class__==attackshield:
                    shield_weapon_sound.play()
                    player.charge -=20
                    a = bullet(player.shield.x+player.shield.width/2-50,player.shield.y-100,player.shield.x+player.shield.width/2-50,player.shield.y-101,4,"meanplayer",100,100)
                    bullets.append(a)
            if screenidentity == 4:
                if event.key == pygame.K_d:
                    movingright = 1
                if event.key == pygame.K_a:
                    movingleft = 1
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_d:
                movingright = 0
            if event.key == pygame.K_a:
                movingleft = 0

        if active == False:
            color = color_passive
        else:
            color = color_active
        Namebox = typing_font.render(Name,True,color)
        if event.type == pygame.MOUSEBUTTONDOWN:
            if Name_rect.collidepoint(event.pos):
                active = True
            else:
                active = False
            if startbutton.isOver(pos) and screenidentity == 1:
                menu_sound.play()
                screenidentity=2
            if continuebutton.isOver(pos) and screenidentity == 1:
                mixer.music.load("Little Cactus - 8 Bit Song.wav")
                mixer.music.play(-1)
                menu_sound.play()
                screenidentity=5
            if quitbutton.isOver(pos) and screenidentity == 1:
                screenidentity=6
                menu_sound.play()
                #running = False
            if achievementbutton.isOver(pos) and screenidentity == 1:
                menu_sound.play()
                screenidentity=3

            if charselectbutton.isOver(pos) and screenidentity == 2 :
                menu_sound.play()
                if charselectvar == 4:
                    charselectvar = 0
                if charselectvar==5:
                    charselectvar=0
                charselectvar += 1
            if backbutton.isOver(pos) and screenidentity == 2:
                menu_sound.play()
                screenidentity= 1
            if backbutton.isOver(pos) and screenidentity == 3:
                menu_sound.play()
                screenidentity= 1
            if finishbutton.isOver(pos) and screenidentity==2 and game_beaten==True:
                menu_sound.play()
                player.name=Name
                nametext = small_header_font.render(player.name, 1, (0, 0, 0))
                player.character=charselectvar
                screenidentity= 4
                mixer.music.load("xDeviruchi - Prepare for Battle! .wav")
                mixer.music.play(-1)
            if finishbutton.isOver(pos) and screenidentity == 2 and game_beaten==False:
                menu_sound.play()
                if charselectvar<4:
                    player.name = Name
                    nametext = small_header_font.render(player.name, 1, (0, 0, 0))
                    player.character = charselectvar
                    screenidentity = 4
                    mixer.music.load("xDeviruchi - Prepare for Battle! .wav")
                    mixer.music.play(-1)
                else:
                    charselectvar=5
            if cancelbutton.isOver(pos) and screenidentity==4:
                menu_sound.play()
                building_active_attack = False
                building_active_heal = False
                building_active_money = False
                deleting_active=False
                action_active=False
                pygame.mouse.set_cursor(*pygame.cursors.arrow)
            if deletebutton.isOver(pos) and screenidentity==4:
                menu_sound.play()
                deleting_active=True
                action_active=True
                pygame.mouse.set_cursor(*pygame.cursors.tri_left)
            if attackbutton.isOver(pos) and screenidentity==4:
                menu_sound.play()
                building_active_attack=True
                action_active=True
                pygame.mouse.set_cursor(*pygame.cursors.diamond)
            if healbutton.isOver(pos) and screenidentity==4:
                menu_sound.play()
                building_active_heal=True
                action_active=True
                pygame.mouse.set_cursor(*pygame.cursors.diamond)
            if genbutton.isOver(pos) and screenidentity==4:
                menu_sound.play()
                action_active=True
                building_active_money=True
                pygame.mouse.set_cursor(*pygame.cursors.diamond)

            if building_active_attack==True and screenidentity==4:
                for i in range(len(player.buildings)):
                    if pos[0]>player.buildings[i].x and pos[0]<player.buildings[i].x+120 and pos[1]>player.buildings[i].y and pos[1]<player.buildings[i].y+20 and player.buildings[i].__class__==freespace:
                        x=player.buildings[i].x
                        y=player.buildings[i].y
                        player.buildings[i]=attackbuilding(x,y)
                        building_active_attack=False
                        action_active=False
                        pygame.mouse.set_cursor(*pygame.cursors.arrow)
            if building_active_heal == True and screenidentity == 4:
                for i in range(len(player.buildings)):
                    if pos[0] > player.buildings[i].x and pos[0] < player.buildings[i].x + 120 and pos[1] > player.buildings[i].y and pos[1] < player.buildings[i].y + 20 and player.buildings[i].__class__ == freespace:
                        x = player.buildings[i].x
                        y = player.buildings[i].y
                        player.buildings[i] = healbuilding(x, y,healmod,healingrange)
                        building_active_heal = False
                        action_active=False
                        pygame.mouse.set_cursor(*pygame.cursors.arrow)
            if building_active_money == True and screenidentity == 4:
                for i in range(len(player.buildings)):
                    if pos[0] > player.buildings[i].x and pos[0] < player.buildings[i].x + 120 and pos[1] > player.buildings[i].y and pos[1] < player.buildings[i].y + 20 and player.buildings[i].__class__ == freespace:
                        x = player.buildings[i].x
                        y = player.buildings[i].y
                        player.buildings[i] = factory(x, y)
                        building_active_money = False
                        action_active=False
                        pygame.mouse.set_cursor(*pygame.cursors.arrow)
            if deleting_active==True and screenidentity==4:
                for i in range(len(player.buildings)):
                    if player.buildings[i].__class__ != freespace and pos[0]>player.buildings[i].x and pos[0]<player.buildings[i].x+player.buildings[i].width and pos[1]>player.buildings[i].y and pos[1]<player.buildings[i].y+player.buildings[i].height:
                        if player.buildings[i].__class__==attackbuilding:
                            x=player.buildings[i].x
                            y=player.buildings[i].y+player.buildings[i].height-10
                            player.buildings[i]=freespace(x,y)
                        if player.buildings[i].__class__ == healbuilding:
                            x = player.buildings[i].x
                            y = player.buildings[i].y + player.buildings[i].height - 20
                            player.buildings[i] = freespace(x, y)
                        if player.buildings[i].__class__==factory:
                            x=player.buildings[i].x
                            y=player.buildings[i].y+player.buildings[i].height
                            player.buildings[i] = freespace(x, y)
                        deleting_active=False
                        action_active=False
                        pygame.mouse.set_cursor(*pygame.cursors.arrow)
            if screenidentity == 4 and pos[0]>350:
                if businessabilityactive == 1:
                    if current_time - shotcooldownbase > 400/player.shield.abilitymult:
                        shotcooldownbase = current_time
                        for i in range(len(player.buildings)):
                            if player.buildings[i].__class__ == attackbuilding:
                                ally_weapon_sound.play()
                                a = bullet(player.buildings[i].x, player.buildings[i].y, pos[0], pos[1], player.bulletspeed, "player",20, 20)
                                bullets.append(a)
                else:
                    if current_time - shotcooldownbase > 400:
                        shotcooldownbase = current_time
                        for i in range(len(player.buildings)):
                            if player.buildings[i].__class__ == attackbuilding:
                                ally_weapon_sound.play()
                                a = bullet(player.buildings[i].x,player.buildings[i].y,pos[0],pos[1],player.bulletspeed,"player",20,20)
                                bullets.append(a)
            if screenidentity==5 :
                if shopbuttons[0]!=None and shopbuttons[1]!=None and shopbuttons[2]!=None and shopbuttons[3]!=None:
                    for i in range(len(shopbuttons)):
                        if shopbuttons[i] != None and shopbuttons[i].isOver(pos):
                            for j in range(len(amounts)):
                                if buttontypes[i]=="money_buff"+str(amounts[j]) and player.currency>=costs[j] and taken[i]=="Untaken":
                                    money_production+=amounts[j]
                                    player.currency-=costs[j]
                                if buttontypes[i]=="healing"+str(amounts[j]) and player.currency>=costs[j] and taken[i]=="Untaken":
                                    healmod+=amounts[j]
                                    player.currency-=costs[j]
                                if buttontypes[i]=="damage"+str(amounts[j]) and player.currency>=costs[j] and taken[i]=="Untaken":
                                    damage+=amounts[j]
                                    player.currency-=costs[j]
                                if buttontypes[i]=="resist"+str(amounts[j]) and player.currency>=costs[j] and taken[i]=="Untaken":
                                    damagetakenmod+=amounts[j]
                                    player.currency-=costs[j]
                            if buttontypes[i]=="passivemon" and player.currency>=200 and taken[i]=="Untaken":
                                income+=1
                                player.currency-=200
                            if buttontypes[i]=="hrange" and player.currency>=200 and taken[i]=="Untaken":
                                healingrange+=1
                                player.currency-=200
                            if buttontypes[i]=="shotspd" and player.currency>=200 and taken[i]=="Untaken":
                                bulletspeed+=1
                                player.currency-=200
                            if buttontypes[i]=="chargespd" and player.currency>=300 and taken[i]=="Untaken":
                                chargemod+=1
                                player.currency-=300
            if screenidentity==6 and cutscenenumber==0 and sceneline<=3:
                sceneline+=1
            if screenidentity==6 and cutscenenumber==0 and sceneline==4:
                cutscenenumber=1
                sceneline=-1
            if screenidentity==6 and cutscenenumber==1 and sceneline<=49:
                sceneline+=1
            if screenidentity==6 and cutscenenumber==1 and sceneline==50:
                cutscenenumber=2
                sceneline=-1
            if screenidentity == 6 and cutscenenumber == 2 and sceneline <=7:
                sceneline+=1
            if screenidentity == 6 and cutscenenumber == 2 and sceneline ==7:
                cutscenenumber=3
                sceneline=-1
            if screenidentity == 6 and cutscenenumber == 3 and sceneline <=4:
                sceneline+=1
            if screenidentity == 6 and cutscenenumber == 3 and sceneline ==4:
                cutscenenumber=4
                sceneline=-1
            if screenidentity == 6 and cutscenenumber == 4 and sceneline <=5:
                sceneline+=1
            if screenidentity == 6 and cutscenenumber == 4 and sceneline ==5:
                cutscenenumber=5
                sceneline=-1
            if screenidentity == 6 and cutscenenumber == 5 and sceneline <=9:
                sceneline+=1
            if screenidentity == 6 and cutscenenumber == 5 and sceneline ==9:
                cutscenenumber=6
                sceneline=-1
            if screenidentity == 6 and cutscenenumber == 6 and sceneline <=10:
                sceneline+=1
            if screenidentity == 6 and cutscenenumber == 6 and sceneline ==10:
                cutscenenumber=7
                sceneline=-1
            if screenidentity == 6 and cutscenenumber == 7 and sceneline <=11:
                sceneline+=1
            if screenidentity == 6 and cutscenenumber == 7 and sceneline ==11:
                cutscenenumber=8
                sceneline=-1
            if screenidentity == 6 and cutscenenumber == 8 and sceneline <=5:
                sceneline+=1
            if screenidentity == 6 and cutscenenumber == 8 and sceneline ==5:
                cutscenenumber=9
                sceneline=-1
            if screenidentity == 6 and cutscenenumber == 9 and sceneline <=5:
                sceneline+=1
            if screenidentity == 6 and cutscenenumber == 9 and sceneline ==5:
                cutscenenumber=10
                sceneline=-1
            if screenidentity == 6 and cutscenenumber == 10 and sceneline <=11:
                sceneline+=1
            if screenidentity == 6 and cutscenenumber == 10 and sceneline ==11:
                cutscenenumber=11
                sceneline=-1
            if screenidentity == 6 and cutscenenumber == 11 and sceneline <=7:
                sceneline+=1
            if screenidentity == 6 and cutscenenumber == 11 and sceneline ==7:
                cutscenenumber=12
                sceneline=-1


        if event.type == pygame.MOUSEMOTION:
            for i in range(len(mainmenubuttons)):
                if mainmenubuttons[i].isOver(pos):
                    mainmenubuttons[i].color = (255,226,68)
                else:
                    mainmenubuttons[i].color = (125,255,255)

            if charselectbutton.isOver(pos):
                charselectbutton.color = (200,200,200)
            else:
                charselectbutton.color = (255,255,255)
            if backbutton.isOver(pos):
                backbutton.color = (200,200,200)
            else:
                backbutton.color = (255,255,255)
            if finishbutton.isOver(pos):
                finishbutton.color = (200,200,200)
            else:
                finishbutton.color = (255, 255, 255)
            if deletebutton.isOver(pos):
                deletebutton.color=(200,200,200)
            else:
                deletebutton.color = (255, 255, 255)
            if cancelbutton.isOver(pos):
                cancelbutton.color=(200,200,200)
            else:
                cancelbutton.color = (255, 255, 255)
            if attackbutton.isOver(pos):
                attackbutton.color=(200,200,200)
            else:
                attackbutton.color = (255, 255, 255)
            if healbutton.isOver(pos):
                healbutton.color=(200,200,200)
            else:
                healbutton.color = (255, 255, 255)
            if genbutton.isOver(pos):
                genbutton.color=(200,200,200)
            else:
                genbutton.color = (255, 255, 255)
            if screenidentity==5:
                for i in range(len(shopbuttons)):
                    if shopbuttons[i].isOver(pos):
                        shopbuttons[i].color = (200, 200, 200)
                    else:
                        shopbuttons[i].color = (250, 250, 250)
                if shopcontinuebutton.isOver(pos):
                    shopcontinuebutton.color = (200, 200, 200)
                else:
                    shopcontinuebutton.color = (255, 255, 255)


    if movingright == 1 and (playerx + (playerwidth)) < 1200:
        playerx += 5
    if movingleft == 1 and playerx > 350:
        playerx -= 5

    if screenidentity == 4:
        if pos[0] > 350 and action_active==False:
            pygame.mouse.set_cursor(*pygame.cursors.broken_x)
        if pos[0] < 350 and action_active==False:
            pygame.mouse.set_cursor(*pygame.cursors.arrow)
        for i in range(len(enemies)):
            if boss != []:
                if boss[0].ability == "Teleportation":
                    r = random.randrange(0, 50)
                else:
                    r = 2
            if enemies[i].x + enemies[i].width < 1200 and enemies[i].direction == "r":
                if r == 1:
                    if enemies[i].x + enemies[i].width + 200 > 1200:
                        enemies[i].x = 1200 - enemies[i].width
                    else:
                        enemies[i].x += 200
                else:
                    enemies[i].x += enemies[i].speed
            if enemies[i].x + enemies[i].width >= 1200 and enemies[i].direction == "r":
                enemies[i].direction = "l"
            if enemies[i].x > 350 and enemies[i].direction == "l":
                if r == 1:
                    if enemies[i].x - 200 < 350:
                        enemies[i].x = 350
                    else:
                        enemies[i].x -= 200
                else:
                    enemies[i].x -= enemies[i].speed
            if enemies[i].x <= 350 and enemies[i].direction == "l":
                enemies[i].direction = "r"
            if enemies[i].__class__ == fastship:
                if current_time - enemies[i].timer > 2000 / enemies[i].attackspeed:
                    enemy_weapon_sound.play()
                    a = bullet(enemies[i].x, enemies[i].y, enemies[i].x, enemies[i].y + 1, 4, "fastship", 20, 20)
                    bullets.append(a)
                    enemies[i].timer=current_time
            if enemies[i].__class__ == strongship:
                if current_time - enemies[i].timer > 2000 / enemies[i].attackspeed:
                    enemy_weapon_sound.play()
                    a = bullet(enemies[i].x, enemies[i].y, enemies[i].x, enemies[i].y + 1, 4, "strongship", 40, 40)
                    bullets.append(a)
                    enemies[i].timer = current_time
        for i in range(len(boss)):
            if boss[i].ability == "EXPLOSION":
                if current_time - boss[i].timer > 4000:
                    a = bullet(boss[i].x, boss[i].y, boss[i].x, boss[i].y + 1, 4, "BOOM", 60, 60)
                    bullets.append(a)
                    boss[i].timer = current_time
            if boss[i].ability == "Healing" or boss[i].ability == "Teleportation" or boss[i].ability == "Shield":
                if current_time - boss[i].timer > 2000:
                    a = bullet(boss[i].x, boss[i].y, boss[i].x, boss[i].y + 1, 4, "strongship", 40, 40)
                    bullets.append(a)
                    boss[i].timer = current_time

        bulletstobedeleted = []
        if bullets != [] and player.shield != None:
            for i in range(len(bullets)):
                for k in range(len(enemies)):
                    if bullets[i].x >= enemies[k].x and bullets[i].x <= enemies[k].x + enemies[k].width and bullets[i].type == "player" or bullets[i].x + bullets[i].width >= enemies[k].x and bullets[i].x + bullets[i].width <= enemies[k].x + enemies[k].width and bullets[i].type == "player":
                        if bullets[i].y >= enemies[k].y and bullets[i].y <= enemies[k].y + enemies[k].height and bullets[i].type == "player" or bullets[i].y + bullets[i].height >= enemies[k].y and bullets[i].y + bullets[i].height <= enemies[k].y + enemies[k].height and bullets[i].type == "player":
                            hit_sound.play()
                            for j in range(len(bulletstobedeleted)):
                                if i==bulletstobedeleted[j]:
                                    bulletstobedeleted.pop(j)
                            bulletstobedeleted.append(i)
                            enemies[k].health-=10+10/100*player.damage
                    if bullets[i].x >= enemies[k].x and bullets[i].x <= enemies[k].x + enemies[k].width and bullets[i].type == "meanplayer" or bullets[i].x + bullets[i].width >= enemies[k].x and bullets[i].x + bullets[i].width <= enemies[k].x + enemies[k].width and bullets[i].type == "meanplayer":
                        if bullets[i].y >= enemies[k].y and bullets[i].y <= enemies[k].y + enemies[k].height and bullets[i].type == "meanplayer" or bullets[i].y + bullets[i].height >= enemies[k].y and bullets[i].y + bullets[i].height <= enemies[k].y + enemies[k].height and bullets[i].type == "meanplayer":
                            hit_sound.play()
                            for j in range(len(bulletstobedeleted)):
                                if i==bulletstobedeleted[j]:
                                    bulletstobedeleted.pop(j)
                            bulletstobedeleted.append(i)
                            enemies[k].health -= 50
                for k in range(len(boss)):
                    if bullets[i].x >= boss[k].x and bullets[i].x <= boss[k].x + boss[k].width and bullets[i].type == "player" or bullets[i].x + bullets[i].width >= boss[k].x and bullets[i].x + bullets[i].width <= boss[k].x + boss[k].width and bullets[i].type == "player":
                        if bullets[i].y >= boss[k].y and bullets[i].y <= boss[k].y + boss[k].height and bullets[i].type == "player" or bullets[i].y + bullets[i].height >= boss[k].y and bullets[i].y + bullets[i].height <= boss[k].y + boss[k].height and bullets[i].type == "player":
                            for j in range(len(bulletstobedeleted)):
                                if i == bulletstobedeleted[j]:
                                    bulletstobedeleted.pop(j)
                            bulletstobedeleted.append(i)
                            boss[k].health -= 10
                    if bullets[i].x >= boss[k].x and bullets[i].x <= boss[k].x + boss[k].width and bullets[i].type == "meanplayer" or bullets[i].x + bullets[i].width >= boss[k].x and bullets[i].x + bullets[i].width <= boss[k].x + boss[k].width and bullets[i].type == "meanplayer":
                        if bullets[i].y >= boss[k].y and bullets[i].y <= boss[k].y + boss[k].height and bullets[i].type == "meanplayer" or bullets[i].y + bullets[i].height >= boss[k].y and bullets[i].y + bullets[i].height <= boss[k].y + boss[k].height and bullets[i].type == "meanplayer":
                            for j in range(len(bulletstobedeleted)):
                                if i == bulletstobedeleted[j]:
                                    bulletstobedeleted.pop(j)
                            bulletstobedeleted.append(i)
                            boss[k].health -= 50
                for k in range(len(bullets)):
                    if bullets[i].x >= bullets[k].x and bullets[i].x <= bullets[k].x + bullets[k].width and bullets[i].type == "BOOM" and bullets[k].type == "player" or bullets[i].x + bullets[i].width >= bullets[k].x and bullets[i].x + bullets[i].width <= bullets[k].x + bullets[k].width and bullets[i].type == "BOOM" and bullets[k].type == "player":
                        if bullets[i].y >= bullets[k].y and bullets[i].y <= bullets[k].y + bullets[k].height and bullets[i].type == "BOOM" and bullets[k].type == "player" or bullets[i].y + bullets[i].height >= bullets[k].y and bullets[i].y + bullets[i].height <= bullets[k].y + bullets[k].height and bullets[i].type == "BOOM" and bullets[k].type == "player":
                            for j in range(len(bulletstobedeleted)):
                                if k == bulletstobedeleted[j]:
                                    bulletstobedeleted.pop(j)
                            bulletstobedeleted.append(k)
                            bullets[i].health -= 4

                    if bullets[i].x >= bullets[k].x and bullets[i].x <= bullets[k].x + bullets[k].width and bullets[i].type == "BOOM" and bullets[k].type == "meanplayer" or bullets[i].x + bullets[i].width >=bullets[k].x and bullets[i].x + bullets[i].width <= bullets[k].x + bullets[k].width and bullets[i].type == "BOOM" and bullets[k].type == "meanplayer":
                        if bullets[i].y >= bullets[k].y and bullets[i].y <= bullets[k].y + bullets[k].height and bullets[i].type == "BOOM" and bullets[k].type == "meanplayer" or bullets[i].y + bullets[i].height >= bullets[k].y and bullets[i].y + bullets[i].height <= bullets[k].y + bullets[k].height and bullets[i].type == "BOOM" and bullets[k].type == "meanplayer":
                            for j in range(len(bulletstobedeleted)):
                                if k == bulletstobedeleted[j]:
                                    bulletstobedeleted.pop(j)
                            bulletstobedeleted.append(k)
                            bullets[i].health -= 20
                for k in range(len(player.buildings)):
                    if player.buildings[k].__class__ != freespace:
                        if bullets[i].x >= player.buildings[k].x and bullets[i].x <= player.buildings[k].x + player.buildings[k].width and bullets[i].type == "fastship" or bullets[i].x + bullets[i].width >= player.buildings[k].x and bullets[i].x + bullets[i].width <= player.buildings[k].x + player.buildings[k].width and bullets[i].type == "fastship":
                            if bullets[i].y >= player.buildings[k].y and bullets[i].y <= player.buildings[k].y + player.buildings[k].height and bullets[i].type == "fastship" or bullets[i].y + bullets[i].height >= player.buildings[k].y and bullets[i].y + bullets[i].height <= player.buildings[k].y + player.buildings[k].height and bullets[i].type == "fastship":
                                hit_sound.play()
                                for j in range(len(bulletstobedeleted)):
                                    if i == bulletstobedeleted[j]:
                                        bulletstobedeleted.pop(j)
                                bulletstobedeleted.append(i)
                                player.buildings[k].health-=10-10/100*player.damagetakenmod
                for k in range(len(player.buildings)):
                    if player.buildings[k].__class__ != freespace:
                        if bullets[i].x >= player.buildings[k].x and bullets[i].x <= player.buildings[k].x + player.buildings[k].width and bullets[i].type == "strongship" or bullets[i].x + bullets[i].width >= player.buildings[k].x and bullets[i].x + bullets[i].width <= player.buildings[k].x + player.buildings[k].width and bullets[i].type == "strongship":
                            if bullets[i].y >= player.buildings[k].y and bullets[i].y <= player.buildings[k].y + player.buildings[k].height and bullets[i].type == "strongship" or bullets[i].y + bullets[i].height >= player.buildings[k].y and bullets[i].y + bullets[i].height <= player.buildings[k].y + player.buildings[k].height and bullets[i].type == "strongship":
                                hit_sound.play()
                                for j in range(len(bulletstobedeleted)):
                                    if i == bulletstobedeleted[j]:
                                        bulletstobedeleted.pop(j)
                                bulletstobedeleted.append(i)
                                player.buildings[k].health-=20-20/100*player.damagetakenmod
                for k in range(len(player.buildings)):
                    if player.buildings[k].__class__ != freespace:
                        if bullets[i].x >= player.buildings[k].x and bullets[i].x <= player.buildings[k].x + player.buildings[k].width and bullets[i].type == "BOOM" or bullets[i].x + bullets[i].width >= player.buildings[k].x and bullets[i].x + bullets[i].width <= player.buildings[k].x + player.buildings[k].width and bullets[i].type == "BOOM":
                            if bullets[i].y >= player.buildings[k].y and bullets[i].y <= player.buildings[k].y + player.buildings[k].height and bullets[i].type == "BOOM" or bullets[i].y + bullets[i].height >= player.buildings[k].y and bullets[i].y + bullets[i].height <= player.buildings[k].y + player.buildings[k].height and bullets[i].type == "BOOM":
                                bulletstobedeleted.append(i)
                                for j in range(len(player.buildings)):
                                    if player.buildings[j].__class__ != freespace:
                                        player.buildings[j].health -= 50-50/100*player.damagetakenmod


                if bullets[i].x >= player.shield.x and bullets[i].x <= player.shield.x + player.shield.width and bullets[i].type == "fastship" or bullets[i].x + bullets[i].width >= player.shield.x and bullets[i].x + bullets[i].width <= player.shield.x + player.shield.width and bullets[i].type == "fastship":
                    if bullets[i].y >= player.shield.y and bullets[i].y <= player.shield.y + player.shield.height and bullets[i].type == "fastship" or bullets[i].y + bullets[i].height >= player.shield.y and bullets[i].y + bullets[i].height <= player.shield.y + player.shield.height and bullets[i].type == "fastship":
                        for j in range(len(bulletstobedeleted)):
                            if i == bulletstobedeleted[j]:
                                bulletstobedeleted.pop(j)
                        bulletstobedeleted.append(i)
                        if shieldabilityactive != 1 and businessabilityactive != 1:
                            if player.charge + 2 * player.shield.chargespeed > 100:
                                player.charge = 100
                                print(player.charge)
                            else:
                                player.charge += 2 * player.shield.chargespeed
                                print(player.charge)

                if bullets[i].x >= player.shield.x and bullets[i].x <= player.shield.x + player.shield.width and bullets[i].type == "strongship" or bullets[i].x + bullets[i].width >= player.shield.x and bullets[i].x + bullets[i].width <= player.shield.x + player.shield.width and bullets[i].type == "strongship":
                    if bullets[i].y >= player.shield.y and bullets[i].y <= player.shield.y + player.shield.height and bullets[i].type == "strongship" or bullets[i].y + bullets[i].height >= player.shield.y and bullets[i].y + bullets[i].height <= player.shield.y + player.shield.height and bullets[i].type == "strongship":
                        for j in range(len(bulletstobedeleted)):
                            if i == bulletstobedeleted[j]:
                                bulletstobedeleted.pop(j)
                        bulletstobedeleted.append(i)
                        if shieldabilityactive != 1 and businessabilityactive != 1:
                            if player.charge + 2 * player.shield.chargespeed > 100:
                                player.charge = 100
                                print(player.charge)
                            else:
                                player.charge += 2 * player.shield.chargespeed
                                print(player.charge)

                if bullets[i].x >= player.shield.x and bullets[i].x <= player.shield.x + player.shield.width and bullets[i].type == "BOOM" or bullets[i].x + bullets[i].width >= player.shield.x and bullets[i].x + bullets[i].width <= player.shield.x + player.shield.width and bullets[i].type == "BOOM":
                    if bullets[i].y >= player.shield.y and bullets[i].y <= player.shield.y + player.shield.height and bullets[i].type == "BOOM" or bullets[i].y + bullets[i].height >= player.shield.y and bullets[i].y + bullets[i].height <= player.shield.y + player.shield.height and bullets[i].type == "BOOM":
                        bulletstobedeleted.append(i)
                        if shieldabilityactive != 1 and businessabilityactive != 1:
                            if player.charge + 2 * player.shield.chargespeed > 100:
                                player.charge = 100
                                print(player.charge)
                            else:
                                player.charge += 2 * player.shield.chargespeed
                                print(player.charge)
                            for j in range(len(player.buildings)):
                                if player.buildings[j].__class__ != freespace:
                                    player.buildings[j].health -= 25-25/100*player.damagetakenmod

                            blockscore += 1

                if bullets[i].x + bullets[i].dx + bullets[i].width > 1200 or bullets[i].x + bullets[i].dx < 350 or bullets[i].y + bullets[i].dy +bullets[i].height > 800 or bullets[i].y + bullets[i].dy < 0:
                    for j in range(len(bulletstobedeleted)):
                        if i == bulletstobedeleted[j]:
                            bulletstobedeleted.pop(j)
                    bulletstobedeleted.append(i)

                if bullets[i].y+bullets[i].dy+bullets[i].height >=720 and bullets[i].type=="fastship" or bullets[i].y+bullets[i].dy+bullets[i].height >=720 and bullets[i].type=="strongship":
                    explode_sound.play()
                    for j in range(len(bulletstobedeleted)):
                        if i == bulletstobedeleted[j]:
                            bulletstobedeleted.pop(j)
                    bulletstobedeleted.append(i)
                    for j in range (len(player.buildings)):
                        if player.buildings[j].__class__!=freespace:
                            player.buildings[j].health-=5-5/100*player.damagetakenmod
                if bullets[i].y + bullets[i].dy + bullets[i].height >= 720 and bullets[i].type == "BOOM":
                    explode_sound.play()
                    bulletstobedeleted.append(i)
                    for j in range(len(player.buildings)):
                        if player.buildings[j].__class__ != freespace:
                            player.buildings[j].health -= 50-50/100*player.damagetakenmod

                if shieldabilityactive ==1:
                    if bullets[i].y >= player.shield.y and bullets[i].y <= player.shield.y + player.shield.height and bullets[i].type == "fastship" or bullets[i].y + bullets[i].height >= player.shield.y and bullets[i].y + bullets[i].height <= player.shield.y + player.shield.height and bullets[i].type == "fastship":
                        for j in range(len(bulletstobedeleted)):
                            if i == bulletstobedeleted[j]:
                                bulletstobedeleted.pop(j)
                        bulletstobedeleted.append(i)
                    if bullets[i].y >= player.shield.y and bullets[i].y <= player.shield.y + player.shield.height and bullets[i].type == "strongship" or bullets[i].y + bullets[i].height >= player.shield.y and bullets[i].y + bullets[i].height <= player.shield.y + player.shield.height and bullets[i].type == "strongship":
                        for j in range(len(bulletstobedeleted)):
                            if i == bulletstobedeleted[j]:
                                bulletstobedeleted.pop(j)
                        bulletstobedeleted.append(i)
                    if bullets[i].y >= player.shield.y and bullets[i].y <= player.shield.y + player.shield.height and bullets[i].type == "BOOM" or bullets[i].y + bullets[i].height >= player.shield.y and bullets[i].y + bullets[i].height <= player.shield.y + player.shield.height and bullets[i].type == "BOOM":
                        bulletstobedeleted.append(i)
                        for j in range(len(player.buildings)):
                            if player.buildings[j].__class__ != freespace:
                                player.buildings[j].health -= 25-25/100*player.damagetakenmod

                bullets[i].x += bullets[i].dx
                bullets[i].y += bullets[i].dy
            for i in range(len(bulletstobedeleted)):
                del bullets[bulletstobedeleted[i]]
            for i in range(len(player.buildings)):
                if player.buildings[i].__class__!=freespace and player.buildings[i].health <= 0:
                    if player.buildings[i].__class__ == attackbuilding:
                        destroy_sound.play()
                        x = player.buildings[i].x
                        y = player.buildings[i].y + player.buildings[i].height - 10
                        player.buildings[i] = freespace(x, y)
                    if player.buildings[i].__class__ == healbuilding:
                        destroy_sound.play()
                        x = player.buildings[i].x
                        y = player.buildings[i].y + player.buildings[i].height - 20
                        player.buildings[i] = freespace(x, y)
                    if player.buildings[i].__class__ == factory:
                        destroy_sound.play()
                        x = player.buildings[i].x
                        y = player.buildings[i].y + player.buildings[i].height
                        player.buildings[i] = freespace(x, y)
        enemiestobedeleted=[]
        bosstobedeleted=[]
        for i in range(len(bullets)):
            if bullets[i].health <= 0:
                bulletstobedeleted.append(i)
        for i in range(len(enemies)):
            if enemies[i].health <= 0:
                enemiestobedeleted.append(i)
        for i in range(len(enemiestobedeleted)):
            destroy_sound.play()
            del enemies[enemiestobedeleted[len(enemiestobedeleted)-i-1]]
            if boss != []:
                if boss[0].ability == "Healing":
                    if boss[0].health + 20 > boss[0].maxhealth:
                        boss[0].health = boss[0].maxhealth
                    else:
                        boss[0].health += 20
        for i in range(len(boss)):
            if boss[i].health <= 0:
                bosstobedeleted.append(i)
        for i in range(len(bosstobedeleted)):
            del boss[bosstobedeleted[len(bosstobedeleted) - i - 1]]
            player.score += 10
        for i in range(len(boss)):
            if boss[i].ability == "Shield":
                for k in range(len(bullets)):
                    if bullets[k].type == "player" and bullets[k].y > boss[i].y or bullets[k].type == "meanplayer" and \
                            bullets[k].y > boss[i].y:
                        if bullets[k].x + bullets[k].width / 2 > boss[i].x + boss[i].width / 2:
                            boss[i].x += 5
                        if bullets[k].x + bullets[k].width / 2 < boss[i].x + boss[i].width / 2:
                            boss[i].x -= 5
                        break
    if screenidentity==4 and timer==40:
        player.currency+=player.income
        timer=0
    if screenidentity==4:
        timer+=1
    windowdraw(screenidentity)
    if screenidentity == 2:
        Name_rect.w = max(230,Namebox.get_width()+10)
        screen.blit(Namebox, (Name_rect.x+5,Name_rect.y))
        pygame.draw.rect(screen,color,Name_rect,2)
    if shieldabilityactive ==1:
        if current_time - shieldtimer > 5000:
            shieldabilityactive = 0
    if businessabilityactive == 1:
        if current_time - shieldtimer > 5000:
            businessabilityactive = 0
    for i in range(len(playerstuff)):
        if playerstuff[i]!=playermods[i]:
            playerstuff[i]=playermods[i]

    pygame.display.update()
    clock.tick(60)
