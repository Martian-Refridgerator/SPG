from Load import *
import pygame
import math
pygame.init()

attack_building=pygame.image.load("attack_building.png")
heal_building=pygame.image.load("heal_building.png")
money_building=pygame.image.load("money_building.png")
untaken=pygame.image.load("untaken.png")

class player:
    def __init__(self):
        self.currency = 0
        self.score = 0
        self.character = None
        self.name = None
        self.shield=None
        self.charge=0
        self.buildings = []
        self.enemies = []

class healShield:
    def __init__(self,x,y):
        self.abilitypower = 1
        self.size = 3
        self.chargespeed = 3
        self.speed = 3
        self.abilitymultiplier = 1
        self.sizem = 1
        self.chargem = 1
        self.speedm = 1
        self.x = x
        self.y = y
        self.width = 191
        self.height = 64

    def ability(self):
        pass

class strongshield:
    def __init__(self,x,y):
        self.abilitypower = 1
        self.size = 3
        self.chargespeed = 3
        self.speed = 3
        self.abilitymultiplier = 1
        self.sizem = 1
        self.chargem = 1
        self.speedm = 1
        self.x = x
        self.y = y
        self.width = 191
        self.height = 64
    def ability(self):
        pass
        #backup = self.sizemultiplier
        #self.sizemultiplier = a lot
        #can.after()
        #self.sizemultiplier = backup

class attackshield:
    def __init__(self,x,y):
        self.abilitypower = 1
        self.size = 3
        self.chargespeed = 3
        self.speed = 3
        self.abilitymultiplier = 1
        self.sizem = 1
        self.chargem = 1
        self.speedm = 1
        self.x = x
        self.y = y
        self.width = 191
        self.height = 64
    def ability(self):
        pass


class buisinessshield:
    def __init__(self,x,y):
        self.abilitypower = 1
        self.size = 3
        self.chargespeed = 3
        self.speed = 3
        self.abilitymultiplier = 1
        self.sizem = 1
        self.chargem = 1
        self.speedm = 1
        self.x = x
        self.y = y
        self.width = 191
        self.height = 64
    def ability(self):
        pass

class freespace:
    def __init__(self,x,y):
        self.x=x
        self.y=y
        self.picture=pygame.transform.scale(untaken, (120,20))
class attackbuilding:
    def __init__(self,x,y):
        self.price = 10
        self.maxhealth = 100
        self.health = 100
        self.damage = 10
        self.attackspeed = 2
        self.shotspeed = 1
        self.damagem = 1
        self.speedm = 1
        self.width = 60
        self.height = 100
        self.x = x
        self.y = y - self.height+10
        self.picture = pygame.transform.scale(attack_building, (60,100))
    def shoot(self):
        pass

class healbuilding:
    def __init__(self,x,y):
        self.price = 10
        self.maxhealth = 100
        self.health = 100
        self.healing = 10
        self.healingrange = 2
        self.healm = 1
        self.rangem = 1
        self.width = 100
        self.height = 120
        self.x = x
        self.y = y - self.height+20
        self.picture = pygame.transform.scale(heal_building, (100,120))
    def healing(self):
        pass


class factory:
    def __init__(self,x,y):
        self.price = 10
        self.maxhealth = 100
        self.health = 100
        self.productionspeed = 1
        self.value = 5
        self.speedm = 1
        self.valuem = 1
        self.width=70
        self.height=150
        self.x = x
        self.y = y - self.height
        self.picture = pygame.transform.scale(money_building, (70,160))
    def produce(self):
        pass
class enemyship:
    def __init__(self):
        self.maxhealth= 40
        self.health= 40
        self.size= 30
class strongship(enemyship):
    def __init__(self,x,y,spawntime):
        super().__init__()
        self.speed = 0.5
        self.damage = 10
        self.attackspeed = 1
        self.shotspeed = 1
        self.healthm = 1
        self.x = x
        self.y = y
        self.timer=spawntime
        self.width = 80
        self.height = 80
        self.direction = "r"

class fastship(enemyship):
    def __init__(self,x,y,spawntime):
        super().__init__()
        self.speed = 2
        self.damage = 5
        self.attackspeed = 2
        self.shotspeed = 1
        self.x = x
        self.y = y
        self.timer=spawntime
        self.width = 80
        self.height = 80
        self.direction = "r"

class buffship(enemyship):
    def __init__(self,bufftype,x,y,spawntime):
        super().__init__()
        self.speed = 1
        self.bufftype = None
        self.buff = bufftype
        self.range = 1
        self.x = x
        self.y = y
        self.timer=spawntime
        self.width = 80
        self.height = 80
        self.direction = "r"


class bossship:
    def __init__(self,ability,x,y,picture):
        self.health = 200
        self.maxhealth = 200
        self.ability = 1
        self.damage = 30
        self.attackspeed = 2
        self.x = x
        self.y = y
        self.picture=picture
    def use(self):
        pass


class bullet:
    def __init__(self,shotx,shoty,targetx,targety,shotspeed,bullettype,width,height):
        self.speed = shotspeed
        self.type = bullettype
        self.x = shotx
        self.y = shoty
        self.width = width
        self.height = height
        self.angle = math.atan2(targety-shoty,targetx-shotx)
        self.dx = math.cos(self.angle)*self.speed
        self.dy = math.sin(self.angle)*self.speed

class button():
    def __init__(self, color, x,y,width,height, text=''):
        self.color = color
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.text = text

    def draw(self, screen, outline=None):
        # Call this method to draw the button on the screen
        if outline:
            pygame.draw.rect(screen, outline, (self.x - 2, self.y - 2, self.width + 4, self.height + 4), 0)

        pygame.draw.rect(screen, self.color, (self.x, self.y, self.width, self.height), 0)

        if self.text != '':
            font = pygame.font.Font('Pixel Digivolve.otf', 20)
            text = font.render(self.text, 1, (0, 0, 0))
            screen.blit(text, (
            self.x + (self.width / 2 - text.get_width() / 2), self.y + (self.height / 2 - text.get_height() / 2)))

    def isOver(self, pos):
        # Pos is the mouse position or a tuple of (x,y) coordinates
        if pos[0] > self.x and pos[0] < self.x + self.width:
            if pos[1] > self.y and pos[1] < self.y + self.height:
                return True

        return False
